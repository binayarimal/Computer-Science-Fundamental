What is the main difference between a stack and a queue?
The main difference is that stack uses LIFO and queue uses FIFO.

What are the similarities between stacks and queues?
They are both datastructure that are used to add and remove data from a list.

Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?
This would use stack data structure  because undo removes the last data that was entered.

Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverse(str){
  let reversedString=[];
  str=str.split("");
  let i=0;
  while(i<str.length){
   reversedString.push( str.pop())
    
  }
  return reversedString.join('')
 }
console.log(reverse("Bloc!"));

Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.


 function fifo(){
   let list=[1,2,3,4,5]
   let newList=[]
   let i=1;
   while(i<=list.length){
     newList.push(list[list.length-i])
     i++
   }
   return newList.pop(); 
 }
  
console.log(fifo())


Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class queue {
  constructor(list) {
        this.list = list;
    }
  enqueue(newValue){
    
    this.list.push(newValue);
    return this.list
   
  }
  dequeue(){
    let temp=this.list[0];
    this.list.shift();
    return temp;
  }
  
}
const queueTest= new queue([1,2,3,4,5])
 
console.log(queueTest.enqueue(1));
console.log(queueTest.dequeue())


