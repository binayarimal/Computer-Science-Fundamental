What is a binary tree and what makes it unique to other trees?
A binary tree is a tree of nodes with each node conaining two children often referred to as left node and right node.

What is a heuristic?
These are guesses that an algorithm makes to solve a complex problem sooner by sacrificing accuracy.

What is another problem besides the shortest-path problem that requires the use of heuristics?
predicting the population growth of a city in future might require heuristics.

What is the difference between a depth-first search and a breadth-first search?
Depth first is an algorithm for traversing or searching tree or graph data structures that start at the root and explore as far as possible along each branch before backtracking. Breadth First start at the tree root and explore the neighbor nodes first, before moving to the next level neighbors.

Explain in your own words what an undirected, a-cyclic, unweighted graph is.
Cyclic graph is when a node esentially points to itself creating a closed loops, Cyclic graph won't cause a closed loop and it will result in a dead end. Unweighted graph is when there is no linked value between nodes.

What kind of graph is a binary search tree?
A binary search tree is a-cyclic graph

Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

Code Answers


class Node {
  constructor(data){
    this.data=data;
    this.left=null;
    this.right=null;
  }


}

class BST {
  constructor(){
    this.root=null;
  }

  insert(data){
    
    let node = new Node(data);
    if (this.root===null)
        {this.root=node;
          return;}
     let root =this.root;
     function add(root){
       if(data<root.data){
         if(root.left===null){
           root.left=node;
           return;
         }
         return add(root.left)
       } else{
         if (root.right===null){
           root.right=node;
           return;
         }
         return add(root.right)
       }
     }
return add(root)
  }

  find(data) {
   let root = this.root;
   function search(root){
    if (data === root.data) {
        return "found";
    } 
     if (data < root.data) {
      if (root.left !== null) {
        return search(root.left);
      } else {
        return null;
      }
    } else {
      if (root.right !== null) {
        return search(root.right);
      } else {
        return null;
      }
    }
       }
      return search(root) ;
    
  }
  distance(n1,n2){
    let root=this.root
  function lca(root){   
    if(n1<root.data && n2<root.data){
      return lca(root.left);
    } else if(n1>root.data && n2>root.data){
      return lca(root.right);}
      else{return root;}
  }
 function path(data,lca) {   
    if (data ===lca.data) {
      return 0;
    } if (data < lca.data) {
      if (lca.left !== null) {
        
        return 1+ path(data,lca.left)
      } else {
        return null;
      }
    } else {
      if (lca.right !== null) {
        
        return 1+path(data,lca.right);
      } else {
        return null;
      }
    }
   
      
  }
     return  path(n1,lca(root))+
    path(n2,lca(root))
  
  }
  

}



const n = new BST();
n.insert(5);
n.insert(6);
n.insert(3);
n.insert(4);
n.insert(8);
n.insert(7);
n.insert(2);
n.insert(11);
n.insert(32);
n.insert(54);
n.insert(18);
n.insert(237);
n.insert(4);
console.log(n.find(6))
console.log(n.distance(5,237));
 

